/*
 * @lc app=leetcode.cn id=123 lang=java
 *
 * [123] 买卖股票的最佳时机 III
 *
 * https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/description/
 *
 * algorithms
 * Hard (38.53%)
 * Likes:    202
 * Dislikes: 0
 * Total Accepted:    11.9K
 * Total Submissions: 30.1K
 * Testcase Example:  '[3,3,5,0,0,3,1,4]'
 *
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * 
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 * 
 * 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 
 * 示例 1:
 * 
 * 输入: [3,3,5,0,0,3,1,4]
 * 输出: 6
 * 解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * 
 * 示例 2:
 * 
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4
 * 。   
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 
 * 
 * 示例 3:
 * 
 * 输入: [7,6,4,3,1] 
 * 输出: 0 
 * 解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
 * 
 */
class Solution {
    public int maxProfit(int[] prices) {
        int dp_i00 = 0;//初始，没买没卖，利润0
//        int dp_i01 = 0;//没买入过，持仓，不可能
        int dp_i11 = Integer.MIN_VALUE;//持仓，买入一次；第一天的上次，不该参与推理，所以初始化为最小值，让计算结果为第一次买入的利润
        int dp_i10 = 0;//空仓，买卖一次；空仓，相当于初始利润从0开始
        int dp_i21 = Integer.MIN_VALUE;//持仓，买入两次；同样，初始持仓只能由买入而来，所以初始化为最小值，让计算结果为新买入产生的利润
        int dp_i20 = 0;//空仓，买卖两次；空仓，相当于初始利润从0开始

        for (int price : prices) {
            dp_i20 = Math.max(dp_i20, dp_i21 + price);//上次买卖完不动 或 买两次卖一次后，这次卖出，dp_i21要用上次计算结果，所以要在这次dp_i21计算之前
            dp_i21 = Math.max(dp_i21, dp_i10 - price);//上次买完不动 或 买卖一次，这次买入，dp_i10要用上次计算结果，所以要在这次dp_i10计算之前
            dp_i10 = Math.max(dp_i10, dp_i11 + price);//上次买卖完不动 或 买了一次，这次卖出，dp_i11要用上次的结果，所以要在这次dp_i11计算之前
            dp_i11 = Math.max(dp_i11, dp_i00 - price);//上次买入不动或第一次买
        }
        return dp_i20;
    }
}

