/*
 * @lc app=leetcode.cn id=887 lang=java
 *
 * [887] 鸡蛋掉落
 *
 * https://leetcode-cn.com/problems/super-egg-drop/description/
 *
 * algorithms
 * Hard (20.56%)
 * Likes:    326
 * Dislikes: 0
 * Total Accepted:    18K
 * Total Submissions: 66.5K
 * Testcase Example:  '1\n2'
 *
 * 你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。
 * 
 * 每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。
 * 
 * 你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。
 * 
 * 每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。
 * 
 * 你的目标是确切地知道 F 的值是多少。
 * 
 * 无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？
 * 
 * 
 * 
 * 
 * 
 * 
 * 示例 1：
 * 
 * 输入：K = 1, N = 2
 * 输出：2
 * 解释：
 * 鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
 * 否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
 * 如果它没碎，那么我们肯定知道 F = 2 。
 * 因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。
 * 
 * 
 * 示例 2：
 * 
 * 输入：K = 2, N = 6
 * 输出：3
 * 
 * 
 * 示例 3：
 * 
 * 输入：K = 3, N = 14
 * 输出：4
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * 1 <= K <= 100
 * 1 <= N <= 10000
 * 
 * 
 */

// @lc code=start
class Solution {
    public int superEggDrop(int K, int N) {
        //dp[k][j]代表k个鸡蛋，操作j次，在最坏的情况下可以验证N层，其中包含F
        //比如只有一个蛋，可操作10次，那从1层开始丢，10层及以下的F是肯定可以被找出来的
        //如果要保证通过j次操作，可以在最少的次数内找到F
        //那需要一定的策略
        //使不管实验一次的结果是破还是不破，后续都应该能满足要求
        //使用最少次数的策略，在X层丢一个蛋，可能破也可能不破
        //如果破了，可以保证在少了一个蛋和少了一次实验次数的情况下，可以在X以下层数找到F，也就是dp[k - 1][j - 1]等于X - 1
        //如果没破，可以保证在蛋没少至少了一次实验的情况下，可以在X及以上层中找到F，也就是dp[k][j - 1]等于N - X
        //N = (X - 1) + (N - X) + 1
        //N = dp[k][j]
        //X - 1 = dp[k - 1][j - 1]
        //N - X = dp[1][j - 1]
        //所以dp[k - 1][j - 1] + dp[k][j - 1] + 1;

        int[][] dp = new int[K + 1][N + 1];
        int j = 0;
        for (int k = 1; k <= K; k++) {
            j = 0;
            do {
                j++;
                if (k == 1) {
                    dp[k][j] = j;
                    continue;
                }
                dp[k][j] = dp[k - 1][j - 1] + dp[k][j - 1] + 1;
            } while (dp[k][j] < N);
        }
        return j;
    }
}
// @lc code=end

